scalar Date

enum Role {
  user
  manager
}

enum OperationType {
  CREATE
  UPDATE
  DELETE
  RECOVER
}

enum Target {
  user
  company
  task
  noteline
  note
  event
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

type User {
  id: ID!
  username: String!
  password: String!
  company: Company!
  editedLines: [NoteLine!]!
  tasks: [Task!]!
  role: Role!
  deletedAt: Date
}

type Operation {
  id: Int!
  type: OperationType!
  date: Date!
  targettype: Target!
  target: Int!
  performedBy: User
  description: String
}

type Company {
  id: ID!
  name: String!
  users: [User!]!
  code: String!
}

type NoteLine {
  id: ID
  content: String
  updatedAt: Date
  color: String
  fontSize: Int
  highlighted: Boolean
  lastEditedBy: User
  lineNumber: Int
}

type Task {
  id: ID!
  title: String!
  description: String
  dueDate: Date!
  completed: Boolean!
  createdAt: Date!
  assignedTo: User
  company: Company!
}

input CreateTaskInput {
  title: String!
  description: String
  dueDate: Date!
  assignedToId: ID
  completed: Boolean
}

input UpdateTaskInput {
  title: String
  description: String
  dueDate: Date
  assignedToId: ID
  completed: Boolean
}

input CreateUserInput {
  username: String!
  password: String!
  role: Role
}

input UpdateUserInput {
  username: String
  password: String
  role: Role
}

type Query {
  hello: String
  users: [User!]!
  user(id: ID!): User
  userByUsername(username: String!, companyId: ID!): User
  usersByCompany(companyId: ID!): [User!]!
  deletedUsers: [User!]!
  operation(limit:Int, start:Int): [Operation!]!
  NoteLines(noteId: ID!, limit:Int, start:Int): [NoteLine!]!
  operationBytargetType(targetType: Target!, start:Int, limit:Int): [Operation]!
  operationByUser(username: String!, start:Int, limit:Int): [Operation]!
  OperationByTarget(targetType: Target!, targetId: Int!, start:Int, limit:Int): [Operation!]
  tasks: [Task!]!
  task(id: ID!): Task
  tasksByUser(userId: ID!): [Task!]!
  tasksByCompany(companyId: ID!): [Task!]!
  allEventTitles: [String!]!
  eventTitlesByDate(date: Date!): [String!]!
}

type Mutation {
  createTask(input: CreateTaskInput!): Task!
  updateTask(id: ID!, input: UpdateTaskInput!): Task!
  deleteTask(id: ID!): Boolean!
  updateUser(id: ID!, input: UpdateUserInput!): User!
  deleteUser(id: ID!): Boolean!
  recoverUser(id: ID!): User!
}
